#version 450 core
#extension GL_ARB_shading_language_include : require
#include "/basic_shapes.comp" //! #include "./basic_shapes.comp"
#include "/materials.comp" //! #include "./materials.comp"
#include "/lights.comp" //! #include "./lights.comp"
#include "/shader_debug.comp" //! #include "./shader_debug.comp"

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D img_output;
uniform uvec2 tile_offset;



//  0 - accumulate samples;
//  1 - rendered frame only
// -1 - reset image buffer
uniform int scene_change = 0;

uniform mat4 camera_proj;
uniform mat4 camera_view;
uniform vec3 camera_loc;

uniform float random_f01;
uniform int samples;

const float hitThreshold = 0.001;
const float farPlane = 10000.0;

uniform sampler2D blueNoise;

uniform int max_diffuse_bounces;
uniform int max_glossy_bounces;
uniform int max_transmissive_bounces;



#define spheres_no 100
#define cubes_no 100
#define cylinders_no 100
#define cones_no 100
#define booleans_no 100
#define point_lights_no 100
#define principled_bsdfs_no 100
#define volume_scatters_no 100
layout (std430, binding = 1) buffer BasicShapes {
	Sphere spheres[spheres_no];
	Cube cubes[cubes_no];
	Cylinder cylinders[cylinders_no];
	Cone cones[cones_no];
	Boolean booleans[booleans_no];
};
layout (std430, binding = 2) buffer Props {
	PointLight point_lights[point_lights_no];
	PrincipledBSDF principled_bsdfs[principled_bsdfs_no];
	VolumeScatter volume_scatters[volume_scatters_no];
};



struct RaycastHit {
	bool hit;
	vec3 location;
	vec3 direction;
	vec3 normal;

	int obj_type;
	int obj_index;

	int material_type;
	int material_index;
};

float signDistBlendedObj(float obj_dist_1, float obj_dist_2, int booleanType = -1, float blend = 0.5) {
	switch(booleanType) {
	case -1:
		return min(obj_dist_1, obj_dist_2);
	case 0:
		return smoothUnion(obj_dist_1, obj_dist_2, blend);
	case 1:
		return smoothIntersect(obj_dist_1, obj_dist_2, blend);
	case 2:
		return smoothDifference(obj_dist_1, obj_dist_2, blend);
	}
}

float signDistObj(vec3 ray_loc, int obj_type, int obj_index) {
	switch(obj_type) {
	case 0:
		return signDistSphere(ray_loc, spheres[obj_index]);
	case 1:
		return signDistCube(ray_loc, cubes[obj_index]);
	case 2:
		return signDistCylinder(ray_loc, cylinders[obj_index]);
	case 3:
		return signDistCone(ray_loc, cones[obj_index]);
	}
	return -999999999;
}
vec3 normalObj(vec3 ray_loc, int obj_type, int obj_index) {
	const float epsilon = 0.001;
	const mat3x3 d = mat3x3(
		vec3(epsilon, 0, 0),
		vec3(0, epsilon, 0),
		vec3(0, 0, epsilon)
	);


	float cd = signDistObj(ray_loc, obj_type, obj_index);
	for (int j = 0; j < booleans_no; j++) {
		if (booleans[j].selfObjType == obj_type && booleans[j].selfObjIndex == obj_index) {
			float distToOther = signDistObj(ray_loc, booleans[j].otherObjType, booleans[j].otherObjIndex);
			cd = signDistBlendedObj(cd, distToOther, booleans[j].type, booleans[j].blend);
		}
	}

	float d0 = signDistObj(ray_loc + d[0], obj_type, obj_index);
	for (int j = 0; j < booleans_no; j++) {
		if (booleans[j].selfObjType == obj_type && booleans[j].selfObjIndex == obj_index) {
			float distToOther = signDistObj(ray_loc + d[0], booleans[j].otherObjType, booleans[j].otherObjIndex);
			d0 = signDistBlendedObj(d0, distToOther, booleans[j].type, booleans[j].blend);
		}
	}
	float d1 = signDistObj(ray_loc + d[1], obj_type, obj_index);
	for (int j = 0; j < booleans_no; j++) {
		if (booleans[j].selfObjType == obj_type && booleans[j].selfObjIndex == obj_index) {
			float distToOther = signDistObj(ray_loc + d[1], booleans[j].otherObjType, booleans[j].otherObjIndex);
			d1 = signDistBlendedObj(d1, distToOther, booleans[j].type, booleans[j].blend);
		}
	}
	float d2 = signDistObj(ray_loc + d[2], obj_type, obj_index);
	for (int j = 0; j < booleans_no; j++) {
		if (booleans[j].selfObjType == obj_type && booleans[j].selfObjIndex == obj_index) {
			float distToOther = signDistObj(ray_loc + d[2], booleans[j].otherObjType, booleans[j].otherObjIndex);
			d2 = signDistBlendedObj(d2, distToOther, booleans[j].type, booleans[j].blend);
		}
	}


	return normalize((vec3(d0, d1, d2) - cd) / epsilon);
}

float signDistScene(vec3 ray_loc) {
	float minDist = 999999999;

	// Check for closest Sphere
	for (int i = 0; i < spheres_no; i++) {
		if (spheres[i].visible == 0) {
			continue;
		}

		float closest = signDistSphere(ray_loc, spheres[i]);
		for (int j = 0; j < booleans_no; j++) {
			if (booleans[j].selfObjType == 0 && booleans[j].selfObjIndex == i) {
				float distToOther = signDistObj(ray_loc, booleans[j].otherObjType, booleans[j].otherObjIndex);
				closest = signDistBlendedObj(closest, distToOther, booleans[j].type, booleans[j].blend);
			}
		}

		if (closest < minDist) {
			minDist = closest;
		}
	}

	// Check for closest Cube
	for (int i = 0; i < cubes_no; i++) {
		if (cubes[i].visible == 0) {
			continue;
		}

		float closest = signDistCube(ray_loc, cubes[i]);
		for (int j = 0; j < booleans_no; j++) {
			if (booleans[j].selfObjType == 1 && booleans[j].selfObjIndex == i) {
				float distToOther = signDistObj(ray_loc, booleans[j].otherObjType, booleans[j].otherObjIndex);
				closest = signDistBlendedObj(closest, distToOther, booleans[j].type, booleans[j].blend);
			}
		}

		if (closest < minDist) {
			minDist = closest;
		}
	}
	
	// Check for closest Cylinder
	for (int i = 0; i < cylinders_no; i++) {
		if (cylinders[i].visible == 0) {
			continue;
		}

		float closest = signDistCylinder(ray_loc, cylinders[i]);
		for (int j = 0; j < booleans_no; j++) {
			if (booleans[j].selfObjType == 2 && booleans[j].selfObjIndex == i) {
				float distToOther = signDistObj(ray_loc, booleans[j].otherObjType, booleans[j].otherObjIndex);
				closest = signDistBlendedObj(closest, distToOther, booleans[j].type, booleans[j].blend);
			}
		}

		if (closest < minDist) {
			minDist = closest;
		}
	}
	
	// Check for closest Cone
	for (int i = 0; i < cones_no; i++) {
		if (cones[i].visible == 0) {
			continue;
		}

		float closest = signDistCone(ray_loc, cones[i]);
		for (int j = 0; j < booleans_no; j++) {
			if (booleans[j].selfObjType == 3 && booleans[j].selfObjIndex == i) {
				float distToOther = signDistObj(ray_loc, booleans[j].otherObjType, booleans[j].otherObjIndex);
				closest = signDistBlendedObj(closest, distToOther, booleans[j].type, booleans[j].blend);
			}
		}

		if (closest < minDist) {
			minDist = closest;
		}
	}

	return minDist;
}
vec3 normalScene(vec3 ray_loc) {
	const float epsilon = 0.001;
	const mat3x3 d = mat3x3(
		vec3(epsilon, 0, 0),
		vec3(0, epsilon, 0),
		vec3(0, 0, epsilon)
	);

	float cd = signDistScene(ray_loc);
	return normalize((vec3(signDistScene(ray_loc + d[0]), signDistScene(ray_loc + d[1]), signDistScene(ray_loc + d[2])) - cd) / epsilon);
}


RaycastHit raycast(vec3 ray_loc, vec3 ray_dir) {
	vec3 init_loc = ray_loc;
	ray_loc += ray_dir * hitThreshold * 100.0;

	int obj_type = -1; // 0 - sphere, 1 - cube, 2 - cylinder, 3 - cone
	int obj_index = -1;
	float minimumDistance = 999999999;
	float mDepsDistMin = 0.5;
	float mDepsDistDiff = 0.1;
	int mDeqCount = 0;
	while (distance(init_loc, ray_loc) < farPlane) {
		float minDist = 999999999;

		// Check for closest Sphere
		for (int i = 0; i < spheres_no; i++) {
			if (spheres[i].visible == 0) {
				continue;
			}

			float closest = signDistSphere(ray_loc, spheres[i]);
			for (int j = 0; j < booleans_no; j++) {
				if (booleans[j].selfObjType == 0 && booleans[j].selfObjIndex == i) {
					float distToOther = signDistObj(ray_loc, booleans[j].otherObjType, booleans[j].otherObjIndex);
					closest = signDistBlendedObj(closest, distToOther, booleans[j].type, booleans[j].blend);
				}
			}

			if (closest < minDist) {
				minDist = closest;
				obj_type  = 0;
				obj_index = i;
			}
		}

		// Check for closest Cube
		for (int i = 0; i < cubes_no; i++) {
			if (cubes[i].visible == 0) {
				continue;
			}

			float closest = signDistCube(ray_loc, cubes[i]);
			for (int j = 0; j < booleans_no; j++) {
				if (booleans[j].selfObjType == 1 && booleans[j].selfObjIndex == i) {
					float distToOther = signDistObj(ray_loc, booleans[j].otherObjType, booleans[j].otherObjIndex);
					closest = signDistBlendedObj(closest, distToOther, booleans[j].type, booleans[j].blend);
				}
			}

			if (closest < minDist) {
				minDist = closest;
				obj_type = 1;
				obj_index = i;
			}
		}
		
		// Check for closest Cylinder
		for (int i = 0; i < cylinders_no; i++) {
			if (cylinders[i].visible == 0) {
				continue;
			}

			float closest = signDistCylinder(ray_loc, cylinders[i]);
			for (int j = 0; j < booleans_no; j++) {
				if (booleans[j].selfObjType == 2 && booleans[j].selfObjIndex == i) {
					float distToOther = signDistObj(ray_loc, booleans[j].otherObjType, booleans[j].otherObjIndex);
					closest = signDistBlendedObj(closest, distToOther, booleans[j].type, booleans[j].blend);
				}
			}

			if (closest < minDist) {
				minDist = closest;
				obj_type = 2;
				obj_index = i;
			}
		}
		
		// Check for closest Cone
		for (int i = 0; i < cones_no; i++) {
			if (cones[i].visible == 0) {
				continue;
			}

			float closest = signDistCone(ray_loc, cones[i]);
			for (int j = 0; j < booleans_no; j++) {
				if (booleans[j].selfObjType == 3 && booleans[j].selfObjIndex == i) {
					float distToOther = signDistObj(ray_loc, booleans[j].otherObjType, booleans[j].otherObjIndex);
					closest = signDistBlendedObj(closest, distToOther, booleans[j].type, booleans[j].blend);
				}
			}

			if (closest < minDist) {
				minDist = closest;
				obj_type = 3;
				obj_index = i;
			}
		}
		
		
		// Minimum distance aproximation for better performance
		// when tracing against parallel surfaces
		if (distance(minimumDistance, minDist) < mDepsDistDiff && minDist < mDepsDistMin) {
			minDist *= pow(2, mDeqCount + 1);
			mDeqCount++;
		} else {
			minimumDistance = minDist;
			mDeqCount = 0;
		}
		ray_loc += ray_dir * minDist;


		if (minDist < hitThreshold) {
			int mat_type =
				  obj_type == 0 ? spheres[obj_index].material_type
				: obj_type == 1 ? cubes[obj_index].material_type
				: obj_type == 2 ? cylinders[obj_index].material_type
				: obj_type == 3 ? cones[obj_index].material_type
				: -1
			;
			int mat_index =
				  obj_type == 0 ? spheres[obj_index].material_index
				: obj_type == 1 ? cubes[obj_index].material_index
				: obj_type == 2 ? cylinders[obj_index].material_index
				: obj_type == 3 ? cones[obj_index].material_index
				: -1
			;

			return RaycastHit(true, ray_loc, ray_dir, normalObj(ray_loc, obj_type, obj_index), obj_type, obj_index, mat_type, mat_index);
		}
	}

	return RaycastHit(false, init_loc, ray_dir, vec3(0.0), -1, -1, -1, -1);
}
RaycastHit raycast_transmissive(vec3 ray_loc, vec3 ray_dir, int obj_type, int obj_index) {
	vec3 init_loc = ray_loc;
	ray_loc += ray_dir * hitThreshold * 100.0;

	while (distance(init_loc, ray_loc) < farPlane) {
		float closest = signDistObj(ray_loc, obj_type, obj_index);
		for (int j = 0; j < booleans_no; j++) {
			if (booleans[j].selfObjType == obj_type && booleans[j].selfObjIndex == obj_index) {
				float distToOther = signDistObj(ray_loc, booleans[j].otherObjType, booleans[j].otherObjIndex);
				closest = signDistBlendedObj(closest, distToOther, booleans[j].type, booleans[j].blend);
			}
		}

		if (abs(closest) < hitThreshold || closest > 0.0) {
			ray_loc += ray_dir * hitThreshold * 100.0;

			int mat_type =
				  obj_type == 0 ? spheres[obj_index].material_type
				: obj_type == 1 ? cubes[obj_index].material_type
				: obj_type == 2 ? cylinders[obj_index].material_type
				: obj_type == 3 ? cones[obj_index].material_type
				: -1
			;
			int mat_index =
				  obj_type == 0 ? spheres[obj_index].material_index
				: obj_type == 1 ? cubes[obj_index].material_index
				: obj_type == 2 ? cylinders[obj_index].material_index
				: obj_type == 3 ? cones[obj_index].material_index
				: -1
			;

			return RaycastHit(true, ray_loc, ray_dir, normalObj(ray_loc, obj_type, obj_index), obj_type, obj_index, mat_type, mat_index);
		}

		ray_loc += ray_dir * abs(closest);
	}

	return RaycastHit(false, init_loc, ray_dir, vec3(0.0), -1, -1, -1, -1);
}

RaycastHit raycast_light(vec3 ray_loc, vec3 ray_dir, inout PointLight point_light) {
	vec3 init_loc = ray_loc;
	ray_loc += ray_dir * hitThreshold * 100.0;

	while (distance(init_loc, ray_loc) < farPlane) {
		float minDist = 999999999;
		float temp = min(minDist, signDistSphere(ray_loc, point_light.location, point_light.radius));
		if (temp < minDist) {
			minDist = temp;
		}
		ray_loc += ray_dir * minDist;
		
		if (abs(minDist) < hitThreshold) {
			vec3 normal = normalSphere(ray_loc, point_light.location, point_light.radius);
			return RaycastHit(true, ray_loc, ray_dir, normal, -1, -1, -1, -1);
		}
	}

	return RaycastHit(false, init_loc, ray_dir, vec3(0.0), -1, -1, -1, -1);
}

RaycastHit reflectRay(inout RaycastHit ray, vec3 normal = vec3(0.0)) {
	vec3 N = (normal.x + normal.y + normal.z > 0.001) ? normal : ray.normal;
	return RaycastHit(
		ray.hit,
		ray.location,
		normalize(reflect(normalize(ray.direction), normalize(N))),
		N,
		ray.obj_type,
		ray.obj_index,
		ray.material_type,
		ray.material_index
	);
}
RaycastHit refractRay(inout RaycastHit ray, float ior_obj, vec3 normal = vec3(0.0), float ior_env = 1.0) {
	vec3 N = (abs(normal.x) + abs(normal.y) + abs(normal.z) > 0.001) ? normal : ray.normal;
	bool enter = dot(ray.direction, N) < 0.0;
	return RaycastHit(
		ray.hit,
		ray.location,
		normalize(ray.direction - reflect((enter ? 1.0 : -1.0) * ray.direction, N) * (enter ? ior_obj / ior_env : ior_env / ior_obj)),
		N,
		ray.obj_type,
		ray.obj_index,
		ray.material_type,
		ray.material_index
	);
}



float random(vec2 uv) {
	return texture(blueNoise, uv + vec2(random_f01, fract(random_f01 * 7.931199))).x;
}
vec3 randomVectorInSphericalCap(vec2 uv, vec3 normal, float max_angle, bool signedSpread = true) {
	vec3 tg1  = tangent(normal);
	vec3 tg2  = normalize(cross(normal, tg1));

	float min_angle = signedSpread ? -max_angle / 2.0 : 0.0;
	max_angle       = signedSpread ?  max_angle / 2.0 : max_angle;

	float theta1 = mix(radians(min_angle), radians(max_angle), random(uv + vec2(0.000, 0.543)));
	float theta2 = mix(radians(min_angle), radians(max_angle), random(uv + vec2(0.341, 0.121)));
	float theta3 = mix(radians(min_angle), radians(max_angle), random(uv + vec2(0.859, 0.652)));

	vec3 rot1 = rotateVector(normal, tg1,    theta1);
	vec3 rot2 = rotateVector(rot1,   tg2,    theta2);
	vec3 rot3 = rotateVector(rot2,   normal, theta3);
	
	return rot3;
}
vec3 randomVectorInHemisphere(vec2 uv, vec3 normal) {
	return randomVectorInSphericalCap(uv, normal, 180.0);
}


vec3 fresnel_schlick(float cos_theta, vec3 F0) {
	return F0 + (1.0 - F0) * pow(1.0 - cos_theta, 5.0);
}
float ndf_ggx(vec3 normal, vec3 half_vector, float roughness) {
	float r2 = roughness * roughness;
	float NdotH = max(dot(normal, half_vector), 0.0);
	float NdotH2 = NdotH * NdotH;

	float denominator = (NdotH2 * (r2 - 1.0) + 1.0);
	return r2 / (pi * denominator * denominator);
}
float geometry_schlick_ggx(float NdotV, float roughness) {
	float r = (roughness + 1.0);
	float k = (r * r) / 8.0;
	return NdotV / (NdotV * (1.0 - k) + k);
}
float geometry_smith(vec3 normal, vec3 view_dir, vec3 light_dir, float roughness) {
	float NdotV = max(dot(normal, view_dir), 0.0);
	float NdotL = max(dot(normal, light_dir), 0.0);
	float ggx1 = geometry_schlick_ggx(NdotV, roughness);
	float ggx2 = geometry_schlick_ggx(NdotL, roughness);
	return ggx1 * ggx2;
}

vec3 generate_diffuse_ray(vec2 uv, inout RaycastHit hit) {
	float rdisp = fract((hit.location.x + hit.location.y + hit.location.z) * 23.49789);
	return randomVectorInHemisphere(uv + vec2(rdisp, fract(rdisp * 3.65243)), hit.normal);
}
vec3 generate_glossy_ray(vec2 uv, inout RaycastHit hit, float roughness) {
	float rdisp = fract((hit.location.x + hit.location.y + hit.location.z) * 19.62173);
	vec3 randomRay = randomVectorInHemisphere(uv + vec2(rdisp, fract(rdisp * 1.722459)), hit.normal);
	vec3 idealRay  = reflectRay(hit).direction;
	return normalize(mix(idealRay, randomRay, roughness));
}
vec3 generate_transmission_ray(vec2 uv, inout RaycastHit hit, float roughness, float ior_exit, float ior_enter) {
	float rdisp = fract((hit.location.x + hit.location.y + hit.location.z) * 37.43111);
	vec3 randomRay = randomVectorInHemisphere(uv + vec2(rdisp, fract(rdisp * 5.652919)), hit.normal);
	vec3 idealRay  = refractRay(hit, ior_enter, hit.normal).direction;
	return normalize(mix(idealRay, randomRay, roughness));
}

vec3 lambertian_shading(inout RaycastHit hit, inout PointLight point_light) {
	vec3 light_dir = normalize(point_light.location - hit.location);

	float light_dist = distance(point_light.location, hit.location);
	float light_attenuation = 1.0 / (0.8 + 0.1 * light_dist + 0.03 * light_dist * light_dist);
	float light_intensity = point_light.intensity * light_attenuation;

	float diffuse_intensity = max(dot(hit.normal, light_dir), 0.0) * light_intensity;
	vec3 diffuse_color = principled_bsdfs[hit.material_index].albedo * point_light.color * diffuse_intensity;
	return diffuse_color;
}
vec3 cook_torrance_brdf(inout RaycastHit hit, inout PointLight point_light) {
	vec3 light_dir = normalize(point_light.location - hit.location);
	vec3 view_dir = normalize(camera_loc - hit.location);
	vec3 half_vector = normalize(view_dir + light_dir);

	vec3 F0 = mix(vec3(0.04), vec3(principled_bsdfs[hit.material_index].reflectance), principled_bsdfs[hit.material_index].metallic);

	float NDF = ndf_ggx(hit.normal, half_vector, principled_bsdfs[hit.material_index].roughness);
	float G = geometry_smith(hit.normal, view_dir, light_dir, principled_bsdfs[hit.material_index].roughness);
	vec3 F = fresnel_schlick(dot(hit.normal, half_vector), F0);

	float denominator = 4.0 * max(dot(hit.normal, view_dir), 0.0) * max(dot(hit.normal, light_dir), 0.0);
	vec3 specular = (NDF * G * F) / max(denominator, 0.001);

	vec3 kS = F;
	vec3 kD = vec3(1.0) - kS;
	kD *= 1.0 - principled_bsdfs[hit.material_index].metallic;

	float light_dist = distance(point_light.location, hit.location);
	float light_attenuation = 1.0 / (0.8 + 0.1 * light_dist + 0.03 * light_dist * light_dist);
	float light_intensity = point_light.intensity * light_attenuation;

	float NdotL = max(dot(hit.normal, light_dir), 0.0);
	return (kD * principled_bsdfs[hit.material_index].albedo + specular * light_intensity) * NdotL;
}

vec3 pbr_shading(inout RaycastHit hit, inout PointLight point_light) {
	vec3 vdiffuse = lambertian_shading(hit, point_light);
	vec3 vspecular = cook_torrance_brdf(hit, point_light);

	return vdiffuse * vspecular;
}


vec3 reflect_lambert(vec2 uv, inout RaycastHit ray) {
	float theta = pi * 2 * random(uv + vec2(0.81321, 0.543199));
	float u     = 2.0 * random(uv + vec2(0.3214666, 0.987522)) - 1.0;
	float r     = sqrt(1.0 - u * u);
	return normalize(ray.normal + vec3(r * cos(theta), r * sin(theta), u));
}





void createOrthonormalBasis(in vec3 N, out vec3 tangent, out vec3 bitangent) {
	vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	tangent = normalize(cross(up, N));
	bitangent = cross(N, tangent);
}


vec3 lambertianBRDF(in vec3 albedo) {
	return albedo / pi;
}


float DistributionGGX(float NdotH, float roughness) {
	float a = roughness * roughness;
	float a2 = a * a;
	float denom = (NdotH * NdotH * (a2 - 1.0) + 1.0);
	return a2 / (pi * denom * denom);
}

float GeometrySchlickGGX(float NdotV, float roughness) {
	float r = roughness + 1.0;
	float k = (r * r) / 8.0;
	return NdotV / (NdotV * (1.0 - k) + k);
}

float GeometrySmith(in vec3 N, in vec3 V, in vec3 L, float roughness) {
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float ggxV = GeometrySchlickGGX(NdotV, roughness);
	float ggxL = GeometrySchlickGGX(NdotL, roughness);
	return ggxV * ggxL;
}

vec3 fresnelSchlick(float VdotH, vec3 F0) {
	return F0 + (1.0 - F0) * pow(1.0 - VdotH, 5.0);
}
vec3 fresnelSchlick_NoH(vec3 N, vec3 V, vec3 F0) {
    float cosTheta = max(dot(N, V), 0.0);
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}
float fresnelDielectricReflectance(float cosThetaI, float etaI, float etaT) {
    // Compute the sine of the incident angle.
    float sinThetaI = sqrt(max(0.0, 1.0 - cosThetaI * cosThetaI));
    // Compute the sine of the transmitted angle using Snell's law.
    float sinThetaT = etaI / etaT * sinThetaI;
    
    // Check for total internal reflection.
    if (sinThetaT >= 1.0) {
        return 1.0;
    }
    
    // Compute the cosine of the transmitted angle.
    float cosThetaT = sqrt(max(0.0, 1.0 - sinThetaT * sinThetaT));
    
    // Calculate Rs and Rp for s- and p- polarizations.
    float Rs = ((etaT * cosThetaI) - (etaI * cosThetaT)) /
               ((etaT * cosThetaI) + (etaI * cosThetaT));
    float Rp = ((etaI * cosThetaI) - (etaT * cosThetaT)) /
               ((etaI * cosThetaI) + (etaT * cosThetaT));
    
    // Average reflectance for unpolarized light.
    return (Rs * Rs + Rp * Rp) * 0.5;
}

vec3 cookTorranceBRDF(in vec3 N, in vec3 V, in vec3 L, float roughness, float ior) {
	vec3 H = normalize(V + L);

	float NdotL = max(dot(N, L), 0.0);
	float NdotV = max(dot(N, V), 0.0);
	float NdotH = max(dot(N, H), 0.0);
	float VdotH = max(dot(V, H), 0.0);
	
	float D = DistributionGGX(NdotH, roughness);
	float G = GeometrySmith(N, V, L, roughness);
	float F = fresnelDielectricReflectance(dot(N, L), 1.0, ior);
	
	float glossy = (D * G * F) / (4.0 * NdotV * NdotL + 0.0001);
	return vec3(glossy);
}


vec3 sampleCosineWeightedDirection(in vec3 N, float rand1, float rand2) {
	float r = sqrt(rand1);
	float theta = 2.0 * pi * rand2;
	float x = r * cos(theta);
	float y = r * sin(theta);
	float z = sqrt(1.0 - rand1);
	
	vec3 tangent, bitangent;
	createOrthonormalBasis(N, tangent, bitangent);
	
	return normalize(x * tangent + y * bitangent + z * N);
}

float pdfDiffuse(in vec3 N, in vec3 sampleDir) {
	float cosine = max(dot(N, sampleDir), 0.0);
	return cosine / pi;
}


vec3 sampleGGXDirection(in vec3 N, in vec3 V, float roughness, float rand1, float rand2) {
	float a = roughness * roughness;
	float phi = 2.0 * pi * rand1;
	float cosTheta = sqrt((1.0 - rand2) / (1.0 + (a * a - 1.0) * rand2));
	float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
	
	vec3 H_tangent = vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);
	
	vec3 tangent, bitangent;
	createOrthonormalBasis(N, tangent, bitangent);
	vec3 H = normalize(tangent * H_tangent.x + bitangent * H_tangent.y + N * H_tangent.z);
	
	vec3 L = reflect(-V, H);
	return L;
}
vec3 sampleGGXRefractionDirection(in vec3 N, in vec3 V, float roughness, float rand1, float rand2, float eta) {
	float a = roughness * roughness;
	float phi = 2.0 * pi * rand1;
	float cosThetaH = sqrt((1.0 - rand2) / (1.0 + (a * a - 1.0) * rand2));
	float sinThetaH = sqrt(1.0 - cosThetaH * cosThetaH);
	
	vec3 H_tangent = vec3(sinThetaH * cos(phi), sinThetaH * sin(phi), cosThetaH);
	
	vec3 tangent, bitangent;
	createOrthonormalBasis(N, tangent, bitangent);
	vec3 H = normalize(tangent * H_tangent.x + bitangent * H_tangent.y + N * H_tangent.z);
	
	vec3 I = -V;
	float cosThetaI = dot(I, H);
	float sin2ThetaI = max(0.0, 1.0 - cosThetaI * cosThetaI);
	float sin2ThetaT = eta * eta * sin2ThetaI;
	
	if (sin2ThetaT >= 1.0) {
		return reflect(-V, H);
	}
	
	float cosThetaT = sqrt(1.0 - sin2ThetaT);
	vec3 T = eta * I - (eta * cosThetaI - cosThetaT) * H;
	
	return normalize(T);
}


vec3 sampleGGX_HalfVector(vec3 N, float roughness, float rand1, float rand2) {
	float a = roughness * roughness;
	float phi = 2.0 * pi * rand1;

	float cosTheta = sqrt((1.0 - rand2) / (1.0 + (a * a - 1.0) * rand2));
	float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
	
	vec3 H_tangent = vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);
	vec3 tangent, bitangent;
	createOrthonormalBasis(N, tangent, bitangent);

	return normalize(tangent * H_tangent.x + bitangent * H_tangent.y + N * H_tangent.z);
}

float pdfGGX(in vec3 N, in vec3 H, in vec3 V, float roughness) {
	float NdotH = max(dot(N, H), 0.0);
	float VdotH = max(dot(V, H), 0.0);
	float D = DistributionGGX(NdotH, roughness);
	return (D * NdotH) / (4.0 * VdotH + 0.0001);
}





vec3 env_light(in RaycastHit ray) {
	float t = 0.5 * (ray.direction.y + 1.0);
	vec3 env_color  = mix(vec3(1.0), vec3(0.5, 0.7, 1.0), t);
	float env_power = 0.0;

	return env_color * env_power;
}

vec3 path_trace_diffuse(in vec2 uv, in RaycastHit hit, in int max_bounces) {
	vec3 radiance = vec3(0.0);
	int bounces = max_bounces;
	vec3 shot_loc = camera_loc;

	while(bounces > 0) {
		vec3 V = normalize(shot_loc - hit.location);
		vec3 N = hit.normal;
		if (dot(V, N) < 0.0) {
			N = -N;
		}

		float rand1 = random(uv + fract(hit.location.zx) + vec2(0.6524222, 0.685732));
		float rand2 = random(uv + fract(hit.location.yx) + vec2(0.5411499, 0.317767));
		
		vec3 diffSampleDir = sampleCosineWeightedDirection(N, rand1, rand2);
		
		float pdf_d = pdfDiffuse(N, diffSampleDir);
		
		vec3 diffuseTerm = lambertianBRDF(principled_bsdfs[hit.material_index].albedo);
		
		vec3 sampleDiffuseContribution = (diffuseTerm * max(dot(N, diffSampleDir), 0.0)) / max(pdf_d, 0.0001);



		radiance += sampleDiffuseContribution;

		shot_loc = hit.location;
		hit = raycast(hit.location, diffSampleDir);

		bounces--;
	}

	return radiance;
}

vec3 path_trace_glossy(in vec2 uv, in RaycastHit hit, in int max_bounces) {
	vec3 radiance = vec3(0.0);
	int bounces = max_bounces;
	vec3 shot_loc = camera_loc;

	while(bounces > 0) {
		vec3 V = normalize(shot_loc - hit.location);
		vec3 N = hit.normal;
		if (dot(V, N) < 0.0) {
			N = -N;
		}

		float roughness = principled_bsdfs[hit.material_index].roughness;
		vec3 F0 = mix(vec3(0.04), vec3(principled_bsdfs[hit.material_index].reflectance), principled_bsdfs[hit.material_index].metallic);
		
		float rand1 = random(uv + fract(hit.location.xy) + vec2(0.431441, 0.69992111));
		float rand2 = random(uv + fract(hit.location.yz) + vec2(0.765221, 0.86754333));
		
		vec3 L = sampleGGXDirection(N, V, roughness, rand1, rand2);
		
		vec3 H = normalize(V + L);
		
		float pdf = pdfGGX(N, H, V, roughness);
		
		vec3 specular = cookTorranceBRDF(N, V, L, roughness, principled_bsdfs[hit.material_index].ior);
		
		float cosTheta = max(dot(N, L), 0.0);
		
		vec3 sampleContribution = (specular * cosTheta) / max(pdf, 0.0001);



		radiance += sampleContribution;

		shot_loc = hit.location;
		hit = raycast(hit.location, L);

		bounces--;
	}

	return radiance;
}

vec3 path_trace(in vec2 uv, in RaycastHit first_hit, int max_diffuse_bounces, int max_glossy_bounces, int max_transmissive_bounces) {
	vec3 throughput = vec3(1.0);
	vec3 radiance = vec3(0.0);
	
	RaycastHit hit = first_hit;
	while (true) {
		if (hit.hit) {
			PrincipledBSDF material = principled_bsdfs[hit.material_index];

			vec3 V = -hit.direction;
			vec3 N = hit.normal;

			vec3 F0 = mix(vec3(0.04), material.albedo, material.metallic);



			// Emissive
			if ((material.emissive.x + material.emissive.y + material.emissive.z) * material.emissive.w > 0.001) {
				radiance += throughput * vec3(material.emissive) * material.emissive.w;
				break;
			}

			// Next Event Estimation (dielectric only)
			bool is_dielectric = material.metallic < 0.01;
			if (true) {
				for (uint i = 0; i < point_lights_no; i++) {
					float u1 = random(uv + fract(hit.location.zy) + fract(point_lights[i].location.yx) + vec2(0.1234454, 0.64532332));
					float u2 = random(uv + fract(hit.location.xz) + fract(point_lights[i].location.xz) + vec2(0.312111, 0.564543));

					vec3 L = point_lights[i].location - hit.location;
					float light_dist = length(L);
					L = normalize(L);
					//vec3 H = mix(normalize(V + L), generate_diffuse_ray(uv, hit), material.roughness);
					//vec3 H = sampleGGX_HalfVector(N, material.roughness, u1, u2);
					
					RaycastHit shadow_hit = raycast(hit.location, L);
					if (!shadow_hit.hit || distance(hit.location, shadow_hit.location) > light_dist) {
						//vec3 F = fresnelSchlick(max(dot(V, H), 0.0), F0);
						float F = fresnelDielectricReflectance(dot(N, L), 1.0, material.ior);
						float roughness_factor = material.roughness * material.roughness;

						float kS = F * (1.0 - roughness_factor);
						float kD = 1.0 - kS;
						kD *= (1.0 - material.metallic);
						
						vec3 diffuse  = lambertianBRDF(material.albedo);
						vec3 specular = cookTorranceBRDF(N, V, L, material.roughness, material.ior);
						vec3 fullBRDF = kD * diffuse + (kS /* + material.reflectance */) * specular;
						
						float light_attenuation = 1.0 / (light_dist * light_dist);
						vec3 light_radiance = point_lights[i].color * point_lights[i].intensity * light_attenuation;
						
						radiance += throughput * fullBRDF * light_radiance * max(dot(N, L), 0.0);
					}
				}
			}



			vec3 newDir;
			float pdf;
			vec3 brdfValue;

			// Transmissive
			if (material.transmission > 0.01) {
				float u1 = random(uv + fract(hit.location.xy) + vec2(0.431441, 0.69992111));
				float u2 = random(uv + fract(hit.location.yz) + vec2(0.765221, 0.86754333));

				//vec3 H = sampleGGX_HalfVector(N, material.roughness, u1, u2);
				//vec3 F = fresnelSchlick(max(dot(V, H), 0.0), F0);
				vec3 F = fresnelSchlick_NoH(N, V, F0);
				float roughness_factor = material.roughness * material.roughness;

				float glossy_probability = clamp((F.x + F.y + F.z) / 3.0, 0.0, 1.0) * (1.0 - roughness_factor); // + material.reflectance;
				float rand = random(uv + fract(hit.location.yz) + vec2(0.213111, 0.5416666));
				bool chose_glossy = false;
				// Glossy rays
				if (rand < glossy_probability && max_glossy_bounces > 0) {
					float u3 = random(uv + fract(hit.location.yx) + vec2(0.123123, 0.5454444));
					float u4 = random(uv + fract(hit.location.zx) + vec2(0.6543211, 0.1745222));

					newDir = sampleGGXDirection(N, V, material.roughness, fract(u1 + u3), fract(u2 + u4));
					vec3 H = normalize(V + newDir);

					pdf = pdfGGX(N, H, V, material.roughness);
					brdfValue = cookTorranceBRDF(N, V, newDir, material.roughness, material.ior);

					throughput *= (brdfValue * max(dot(N, newDir), 0.0)) / max(pdf, 0.0001);

					max_glossy_bounces--;
					chose_glossy = true;
				}
				// Transmission rays
				else if (max_transmissive_bounces > 0) {
					float u3 = random(uv + fract(hit.location.yz) + vec2(0.1165666, 0.652222));
					float u4 = random(uv + fract(hit.location.xz) + vec2(0.5467777, 0.143511));

					//newDir = sampleGGXRefractionDirection(N, V, material.roughness, fract(u1 + u3), fract(u2 + u4), 1.0 / material.ior);
					newDir = sampleGGXDirection(N, V, material.roughness, fract(u1 + u3), fract(u2 + u4));
					vec3 H = normalize(V + newDir);
					newDir = refractRay(hit, material.ior, H).direction;

					/*
					float eta = dot(V, N) > 0.0 ? (1.0 / material.ior) : material.ior;

					float D = DistributionGGX(NdotH, material.roughness);
					pdf = (D * NdotH) / (4.0 * abs(dot(newDir, H)) + 0.0001);

					float G = GeometrySmith(N, V, newDir, material.roughness);
					float denom = (NdotV + eta * max(dot(N, newDir), 0.0));
					denom = denom * denom + 0.0001;

					brdfValue = (vec3(1.0) - vec3(F)) * (eta * eta) * abs(dot(newDir, H)) * D * G / denom;
					*/

					max_transmissive_bounces--;
					chose_glossy = false;
				}

				RaycastHit hit_copy = hit;
				if (chose_glossy) {
					hit = raycast(hit.location, newDir);
				} else {
					hit = raycast_transmissive(hit.location, newDir, hit.obj_type, hit.obj_index);
					
					//H = sampleGGX_HalfVector(hit.normal, material.roughness, fract(u2 + 0.12399), fract(u1 + 0.72223));
					//newDir = refractRay(hit, material.ior, H).direction;
					newDir = sampleGGXDirection(hit.normal, -hit.direction, material.roughness, fract(u2 + 0.12399), fract(u1 + 0.72223));
					vec3 H = normalize(-hit.direction + newDir);
					newDir = refractRay(hit, material.ior, H).direction;

					hit = raycast(hit.location, newDir);
				}

				// Trace Ray for Lights
				if (chose_glossy && max_glossy_bounces == 0 || !chose_glossy && max_transmissive_bounces == 0) {
					{ /*
					RaycastHit shadow_hit = hit;
					hit = hit_copy;

					if (!chose_glossy) {
						hit = shadow_hit;
						shadow_hit = raycast(shadow_hit.location, refractRay(shadow_hit, material.ior).direction);
					}
					float shadow_dist = shadow_hit.hit ? distance(hit.location, shadow_hit.location) : 999999999;
					
					for (uint i = 0; i < point_lights_no; i++) {
						RaycastHit light_hit = raycast_light(hit.location, newDir, point_lights[i]);
						float light_dist = light_hit.hit ? distance(hit.location, light_hit.location) : 999999999;

						if (light_hit.hit && (!shadow_hit.hit || shadow_dist > light_dist)) {
							vec3 L = normalize(light_hit.location - hit.location);
							float cosNL = max(dot(N, L), 0.0);

							float light_attenuation = 1.0 / (light_dist * light_dist);
							vec3 light_radiance = point_lights[i].color * point_lights[i].intensity;

							//radiance += throughput * light_radiance * cosNL * light_attenuation;
						}
					}
					if (!shadow_hit.hit) {
						radiance += throughput * env_light(shadow_hit);
					}
					*/ }

					break;
				}
			}
			// Non-transmissive
			else {
				float u1 = random(uv + fract(hit.location.xz) + vec2(0.431111, 0.1544443));
				float u2 = random(uv + fract(hit.location.zy) + vec2(0.435666, 0.7856233));

				//vec3 H = sampleGGX_HalfVector(N, material.roughness, u1, u2);
				//vec3 F = fresnelSchlick(max(dot(V, H), 0.0), F0);
				vec3 F = fresnelSchlick_NoH(N, V, F0);
				float roughness_factor = material.roughness * material.roughness;

				float glossy_probability = clamp((F.x + F.y + F.z) / 3.0, 0.0, 1.0) * (1.0 - roughness_factor); // + material.reflectance;
				float rand = random(uv + fract(hit.location.zx) + vec2(0.541233, 0.991198));
				bool chose_glossy = false;
				// Glossy rays
				if (rand < glossy_probability && max_glossy_bounces > 0) {
					float u3 = random(uv + fract(hit.location.xy) + vec2(0.431441, 0.69992111));
					float u4 = random(uv + fract(hit.location.yz) + vec2(0.765221, 0.86754333));

					newDir = sampleGGXDirection(N, V, material.roughness, fract(u1 + u3), fract(u2 + u4));
					vec3 H = normalize(V + newDir);

					pdf = pdfGGX(N, H, V, material.roughness);
					brdfValue = cookTorranceBRDF(N, V, newDir, material.roughness, material.ior);

					max_glossy_bounces--;
					chose_glossy = true;
				}
				// Diffuse rays
				else if (max_diffuse_bounces > 0) {
					float u3 = random(uv + fract(hit.location.zx) + vec2(0.6524222, 0.685732));
					float u4 = random(uv + fract(hit.location.yx) + vec2(0.5411499, 0.317767));

					newDir = sampleCosineWeightedDirection(N, fract(u1 + u3), fract(u2 + u4));

					pdf = pdfDiffuse(N, newDir);
					brdfValue = lambertianBRDF(material.albedo);

					max_diffuse_bounces--;
					chose_glossy = false;
				}
				
				throughput *= (brdfValue * max(dot(N, newDir), 0.0)) / max(pdf, 0.0001);

				//RaycastHit hit_copy = hit;
				hit = raycast(hit.location, newDir);

				// Trace Ray for Lights
				if (chose_glossy && max_glossy_bounces == 0 || !chose_glossy && max_diffuse_bounces == 0) {
					{ /*
					RaycastHit shadow_hit = hit;
					hit = hit_copy;
					float shadow_dist = shadow_hit.hit ? distance(hit.location, shadow_hit.location) : 999999999;
					
					for (uint i = 0; i < point_lights_no; i++) {
						RaycastHit light_hit = raycast_light(hit.location, newDir, point_lights[i]);
						float light_dist = light_hit.hit ? distance(hit.location, light_hit.location) : 999999999;

						if (light_hit.hit && (!shadow_hit.hit || shadow_dist > light_dist)) {
							vec3 L = normalize(light_hit.location - hit.location);
							float cosNL = max(dot(N, L), 0.0);

							float light_attenuation = 1.0 / (light_dist * light_dist);
							vec3 light_radiance = point_lights[i].color * point_lights[i].intensity;

							//radiance += throughput * light_radiance * cosNL * light_attenuation;
						}
					}
					if (!shadow_hit.hit) {
						radiance += throughput * env_light(shadow_hit);
					}
					*/ }

					break;
				}
			}

			{ /*
			// Russian roulette
			if (bounce > 2) {
				float survivalProb = max(throughput.r, max(throughput.g, throughput.b));
				float rProb = random(uv + fract(hit.location.xz) + vec2(0.431551, 0.1234889));
				if (rProb > survivalProb) {
					break;
				}
				throughput /= survivalProb;
			}
			*/ }
		}
		// Environment contribution
		else {
			radiance += throughput * env_light(hit);
			break;
		}
	}

	return radiance;
}



void main() {
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy) + ivec2(tile_offset);
	vec2 uv = vec2(pixel_coords) / vec2(imageSize(img_output));

	if (scene_change == 1) {
		imageStore(img_output, pixel_coords, vec4(vec3(0.0), 1.0));
		return;
	}



	int ray_index = pixel_coords.y * imageSize(img_output).x + pixel_coords.x;

	float ndcX = uv.x * 2.0 - 1.0;
	float ndcY = 1.0 - uv.y * 2.0;

	vec4 clipSpace = vec4(ndcX, ndcY, 0.0, 1.0);
	vec4 viewSpace = inverse(camera_proj) * clipSpace;
	viewSpace.xyz /= viewSpace.w;
	vec4 worldSpace = inverse(camera_view) * viewSpace;
	worldSpace.xyz /= worldSpace.w;

	vec3 ray_loc = camera_loc;
	vec3 ray_dir = normalize(worldSpace.xyz - camera_loc);
	vec3 ray_color = vec3(0.0);

	//imageStore(img_output, pixel_coords, vec4(abs(ray_dir.x) * (ray_dir.x > 0.0 ? red : neg(red)), 1.0));



	RaycastHit hit = raycast(ray_loc, ray_dir);
	ray_color = path_trace(uv, hit, max_diffuse_bounces, max_glossy_bounces, max_transmissive_bounces);

	{ /*
	if (hit.hit) {
		PrincipledBSDF material = principled_bsdfs[hit.material_index];

		if (material.transmission < 0.01) {
			for (int i = 0; i < point_lights_no; i++) {
				float r = point_lights[i].radius * 3.0;
				float att = max(0.0, r - distance(hit.location, point_lights[i].location)) / r;
				vec3 light = point_lights[i].intensity * point_lights[i].color * att;
				ray_color += material.albedo * light;
			}
		}
		else {
			hit = raycast_transmissive(hit.location, refractRay(hit, material.ior).direction, hit.obj_type, hit.obj_index);
			if (hit.hit) {
				hit = raycast(hit.location, refractRay(hit, material.ior).direction);
				if (hit.hit) {
					material = principled_bsdfs[hit.material_index];

					for (int i = 0; i < point_lights_no; i++) {
						float r = point_lights[i].radius * 3.0;
						float att = max(0.0, r - distance(hit.location, point_lights[i].location)) / r;
						vec3 light = point_lights[i].intensity * point_lights[i].color * att;
						ray_color = material.albedo * light;
					}
				}
			}
		}
	}
	ray_color /= 100.0;
	*/

	/*
	if (hit.hit == true) {
		ray_color *= path_trace_diffuse(uv, hit, max_diffuse_bounces);
		ray_color *= path_trace_glossy(uv, hit, max_glossy_bounces);
	}
	*/ }

	ray_color = max(ray_color, 0.0);



	vec3 currect_pixel = max(imageLoad(img_output, pixel_coords).xyz, 0.0);
	vec4 final_color = vec4((currect_pixel + ray_color), 1.0);
	imageStore(img_output, pixel_coords, final_color);


	//imageStore(img_output, pixel_coords, texture(blueNoise, uv));
}
