#version 460 core
#extension GL_ARB_shading_language_include : require
#include "/basic_shapes.comp" //! #include "./basic_shapes.comp"
#include "/utils.comp" //! #include "./utils.comp"
layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D img_output;



uniform mat4 camera_proj;
uniform mat4 camera_view;
uniform vec3 camera_pos;
uniform int rng_seed;
uniform int reset = 0; // -1: reseting, 0: reseted, 1: have to reset
uniform int samples;

const float hitThreshold = 0.001;
const float farPlane = 1000.0;
const int max_bounces = 8;
const float diffusion_angle = 80.0; // in degrees
uniform vec3 light_pos = vec3(-20.0, -20.0, 20.0);
uniform float light_radius = 2.0;


layout (std430, binding = 1) buffer Spheres {
	Sphere[] spheres;
};
uniform int spheres_no;

layout (std430, binding = 2) buffer Cubes {
	Cube[] cubes;
};
uniform int cubes_no;

layout (std430, binding = 3) buffer Cylinders {
	Cylinder[] cylinders;
};
uniform int cylinders_no;
/*
layout (std430, binding = 4) buffer Cones {
	Cone[] cones;
};
uniform int cones_no;
*/

struct RaycastHit {
	bool hit;
	vec3 ray_pos;
	vec3 ray_dir;
	vec4 ray_color;
	vec3 normal;
	int obj_type;
	int obj_index;
};
RaycastHit raycast(vec3 ray_pos, vec3 ray_dir) {
	vec3 init_pos = ray_pos;
	ray_pos += ray_dir * hitThreshold * 100.0;

	int obj_type = -1; // 0 - sphere, 1 - cube, 2 - cylinder
	int obj_index = -1;
	while (distance(init_pos, ray_pos) < farPlane) {
		float minDist = 10000000.0;
		for (int i = 0; i < spheres_no; ++i) {
			float temp = min(minDist, signDistSphere(ray_pos, spheres[i].location, spheres[i].radius));
			if (temp < minDist) {
				minDist = temp;
				obj_type = 0;
				obj_index = i;
			}
		}
		for (int i = 0; i < cubes_no; ++i) {
			float temp = min(minDist, signDistCube(ray_pos, cubes[i].location, cubes[i].dimensions));
			if (temp < minDist) {
				minDist = temp;
				obj_type = 1;
				obj_index = i;
			}
		}
		for (int i = 0; i < cylinders_no; ++i) {
			float temp = min(minDist, signDistCylinder(ray_pos, cylinders[i].location, cylinders[i].radius, cylinders[i].height));
			if (temp < minDist) {
				minDist = temp;
				obj_type = 2;
				obj_index = i;
			}
		}
		ray_pos += ray_dir * minDist;
		
		if (minDist < hitThreshold) {
			vec3 normal =
				  obj_type == 0 ? normalSphere(ray_pos, spheres[obj_index].location, spheres[obj_index].radius)
				: obj_type == 1 ? normalCube(ray_pos, cubes[obj_index].location, cubes[obj_index].dimensions)
				: obj_type == 2 ? normalCylinder(ray_pos, cylinders[obj_index].location, cylinders[obj_index].radius, cylinders[obj_index].height)
				: vec3(0.0)
			;
			vec4 color =
				  obj_type == 0 ? spheres[obj_index].color
				: obj_type == 1 ? cubes[obj_index].color
				: obj_type == 2 ? cylinders[obj_index].color
				: vec4(1.0)
			;
			return RaycastHit(true, ray_pos, ray_dir, color, normal, obj_type, obj_index);
		}
	}

	return RaycastHit(false, vec3(0.0), vec3(0.0), vec4(0.0), vec3(0.0), -1, -1);
}
RaycastHit raycast_light(vec3 ray_pos, vec3 ray_dir) {
	vec3 init_pos = ray_pos;
	ray_pos += ray_dir * hitThreshold * 100.0;

	while (distance(init_pos, ray_pos) < farPlane) {
		float minDist = 10000000.0;
		float temp = min(minDist, signDistSphere(ray_pos, light_pos, light_radius));
		if (temp < minDist) {
			minDist = temp;
		}
		ray_pos += ray_dir * minDist;
		
		if (minDist < hitThreshold) {
			vec3 normal = normalSphere(ray_pos, light_pos, light_radius);
			return RaycastHit(true, ray_pos, ray_dir, vec4(1.0), normal, -1, -1);
		}
	}

	return RaycastHit(false, vec3(0.0), vec3(0.0), vec4(0.0), vec3(0.0), -1, -1);
}

vec3 reflectHit(in RaycastHit hit) {
	return normalize(reflect(normalize(hit.ray_dir), normalize(hit.normal)));
}



void main() {
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = vec2(pixel_coords) / vec2(imageSize(img_output));

	if (reset == -1) {
		imageStore(img_output, pixel_coords, vec4(0.0, 0.0, 0.0, 1.0));
		return;
	}


	int ray_index = pixel_coords.y * imageSize(img_output).x + pixel_coords.x;

	float ndcX = 1.0 - (pixel_coords.x * 2.0) / imageSize(img_output).x;
	float ndcY = 1.0 - (pixel_coords.y * 2.0) / imageSize(img_output).y;

	vec4 ndcPoint = vec4(ndcX, ndcY, -1.0, 1.0);

	vec4 worldPoint = inverse(camera_proj * camera_view) * ndcPoint;
	worldPoint /= worldPoint.w;

	vec3 ray_loc = camera_pos;
	vec3 ray_dir = normalize(worldPoint.xyz - camera_pos);
	vec3 ray_color = vec3(0.0);


	RaycastHit hit = raycast(ray_loc, ray_dir);
	/*
	if (hit.hit == true) {
		//ray_color = hit.ray_color.xyz;
		RaycastHit shadow_hit = raycast(hit.ray_pos, normalize(light_pos - hit.ray_pos));
		if (shadow_hit.hit == true) {
			if (hit.obj_type == shadow_hit.obj_type
			&& hit.obj_index == shadow_hit.obj_index) {
				ray_color *= 0.5;
				//ray_color *= vec3(0.7, 0.0, 0.0);
			} else if (distance(hit.ray_pos, shadow_hit.ray_pos) < distance(hit.ray_pos, light_pos)) {
				ray_color *= 0.5;
				//ray_color = vec3(shadow_hit.ray_color) * 0.5;
				//ray_color *= hueShift(vec3(0.0, 0.7, 0.0), mulAdd(hit.obj_type + 1, (hit.obj_index + 1) * 10) * 30);
			}
		}
	} else {
		ray_color = vec3(0.0);
	}
	hit = raycast_light(ray_loc, ray_dir);
	if (hit.hit == true) {
		ray_color = vec3(1.0, 0.0, 1.0);
	}
	*/
	if (hit.hit == true) {
		ray_color = hit.ray_color.xyz;
		int bounces = max_bounces;
		float dist = 0.0;
		float light_intensity = 1.0;

		while (bounces > 0) {
			vec3 light_dir = rotateVectorRandom(reflectHit(hit), rng_seed, diffusion_angle);
			RaycastHit light_hit = raycast_light(hit.ray_pos, light_dir);
			if (light_hit.hit == true) {
				RaycastHit shadow_hit = raycast(hit.ray_pos, light_dir);
				if (shadow_hit.hit == true) {
					if (hit.obj_type == shadow_hit.obj_type
					&& hit.obj_index == shadow_hit.obj_index) {
						ray_color *= 0.0;
					} else if (distance(hit.ray_pos, shadow_hit.ray_pos) < distance(hit.ray_pos, light_pos)) {
						ray_color *= 0.0;
					}
				}
			} else {
				ray_color *= 0.0;
			}

			vec3 new_dir = rotateVectorRandom(reflectHit(hit), rng_seed, diffusion_angle);
			RaycastHit last_hit = hit;
			hit = raycast(hit.ray_pos, new_dir);
			if (hit.hit == false) {
				break;
			}
			
			dist += distance(last_hit.ray_pos, hit.ray_pos);
			float light_energy = light_intensity / (distance(light_pos, hit.ray_pos) + dist);
			ray_color += hit.ray_color.xyz * light_energy; //mix(vec3(0.22, 0.014, 0.002), vec3(0.3, 0.6, 0.8), light_energy);
			
			bounces--;
		}
	}
	ray_color = max(normalize(ray_color), 0.0);


	vec3 currect_pixel = max(vec3(imageLoad(img_output, pixel_coords)), 0.0);
	vec4 final_color = vec4((currect_pixel + ray_color), 1.0);
	final_color.a = 1.0;
	if (reset == 1) {
		imageStore(img_output, pixel_coords, vec4(ray_color * samples, 1.0));
	}
	else if (reset == 0) {
		imageStore(img_output, pixel_coords, final_color);
	}
}
