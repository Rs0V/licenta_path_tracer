#version 460 core
#extension GL_ARB_shading_language_include : require
#include "/basic_shapes.comp" //! #include "./basic_shapes.comp"
#include "/materials.comp" //! #include "./materials.comp"
#include "/lights.comp" //! #include "./lights.comp"

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D img_output;



//  0 - accumulate samples;
//  1 - rendered frame only
// -1 - reset image buffer
uniform int scene_change = 0;

uniform mat4 camera_proj;
uniform mat4 camera_view;
uniform vec3 camera_loc;

uniform float random_f01;
uniform int samples;

const float hitThreshold = 0.001;
const float farPlane = 1000.0;

uniform sampler2D blueNoise;



layout (std430, binding = 1) buffer Spheres {
	Sphere[] spheres;
};
uniform int spheres_no;

layout (std430, binding = 2) buffer Cubes {
	Cube[] cubes;
};
uniform int cubes_no;

layout (std430, binding = 3) buffer Cylinders {
	Cylinder[] cylinders;
};
uniform int cylinders_no;

layout (std430, binding = 4) buffer Cones {
	Cone[] cones;
};
uniform int cones_no;


layout (std430, binding = 5) buffer Booleans {
	Boolean[] booleans;
};
uniform int booleans_no;


layout (std430, binding = 6) buffer PointLights {
	PointLight[] point_lights;
};
uniform int point_lights_no;


layout (std430, binding = 7) buffer PrincipledBSDFs {
	PrincipledBSDF[] principled_bsdfs;
};
uniform int principled_bsdfs_no;

layout (std430, binding = 8) buffer VolumeScatters {
	VolumeScatter[] volume_scatters;
};
uniform int volume_scatters_no;



struct RaycastHit {
	bool hit;
	vec3 location;
	vec3 direction;
	vec3 normal;

	int obj_type;
	int obj_index;

	int material_type;
	int material_index;
};

float signDistBlendedObj(float obj_dist_1, float obj_dist_2, int booleanType = -1, float blend = 0.5) {
	switch(booleanType) {
	case -1:
		return min(obj_dist_1, obj_dist_2);
	case 0:
		return smoothUnion(obj_dist_1, obj_dist_2, blend);
	case 1:
		return smoothIntersect(obj_dist_1, obj_dist_2, blend);
	case 2:
		return smoothDifference(obj_dist_1, obj_dist_2, blend);
	}
}
float signDistObj(vec3 ray_loc, int obj_type, int obj_index) {
	switch(obj_type) {
	case 0:
		return signDistSphere(ray_loc, spheres[obj_index]);
	case 1:
		return signDistCube(ray_loc, cubes[obj_index]);
	case 2:
		return signDistCylinder(ray_loc, cylinders[obj_index]);
	case 3:
		return signDistCone(ray_loc, cones[obj_index]);
	}
	return -999999999;
}
float signDistScene(vec3 ray_loc) {
	float minDist = 999999999;

	#define distCheckObjs(obj_name, objs, obj_type) \
	for (int i = 0; i < objs##_no; i++) { \
		if (objs[i].visible == 0) { \
			continue; \
		} \
		float closest = 999999999; \
		\
		float distTo##obj_name = signDist##obj_name(ray_loc, objs[i]); \
		for (int j = 0; j < booleans_no; j++) { \
			if (booleans[j].selfObjType == obj_type && booleans[j].selfObjIndex == i) { \
				float distToOther = signDistObj(ray_loc, booleans[j].otherObjType, booleans[j].otherObjIndex); \
				float booleanDist = signDistBlendedObj(distTo##obj_name, distToOther, booleans[j].type, booleans[j].blend); \
				closest = signDistBlendedObj(minDist, booleanDist); \
			} \
		} \
		\
		if (closest < minDist) { \
			minDist = closest; \
		} \
	}


	// Check for closest Sphere
	distCheckObjs(Sphere, spheres, 0)

	// Check for closest Cube
	distCheckObjs(Cube, cubes, 1)

	// Check for closest Cylinder
	distCheckObjs(Cylinder, cylinders, 2)

	// Check for closest Cone
	distCheckObjs(Cone, cones, 3)


	return minDist;
}

vec3 normalScene(vec3 ray_loc) {
	const float epsilon = 0.001;
	const mat3x3 d = mat3x3(
		vec3(epsilon, 0, 0),
		vec3(0, epsilon, 0),
		vec3(0, 0, epsilon)
	);

	float cd = signDistScene(ray_loc);
	return normalize((vec3(signDistScene(ray_loc + d[0]), signDistScene(ray_loc + d[1]), signDistScene(ray_loc + d[2])) - cd) / epsilon);
}


RaycastHit raycast(vec3 ray_loc, vec3 ray_dir) {
	vec3 init_loc = ray_loc;
	ray_loc += ray_dir * hitThreshold * 100.0;

	int obj_type = -1; // 0 - sphere, 1 - cube, 2 - cylinder, 3 - cone
	int obj_index = -1;
	float minimumDistance = 999999999;
	float mDepsDistMin = 0.5;
	float mDepsDistDiff = 0.1;
	int mDeqCount = 0;
	while (distance(init_loc, ray_loc) < farPlane) {
		float minDist = 999999999;

		#define distCheckObjs1(obj_name, objs, _obj_type) \
		for (int i = 0; i < objs##_no; i++) { \
			if (objs[i].visible == 0) { \
				continue; \
			} \
			float closest = 999999999; \
			\
			float distTo##obj_name = signDist##obj_name(ray_loc, objs[i]); \
			for (int j = 0; j < booleans_no; j++) { \
				if (booleans[j].selfObjType == obj_type && booleans[j].selfObjIndex == i) { \
					float distToOther = signDistObj(ray_loc, booleans[j].otherObjType, booleans[j].otherObjIndex); \
					float booleanDist = signDistBlendedObj(distTo##obj_name, distToOther, booleans[j].type, booleans[j].blend); \
					closest = signDistBlendedObj(minDist, booleanDist); \
				} \
			} \
			\
			if (closest < minDist) { \
				minDist = closest; \
				obj_type = _obj_type; \
				obj_index = i; \
			} \
		}


		// Check for closest Sphere
		distCheckObjs1(Sphere, spheres, 0)

		// Check for closest Cube
		distCheckObjs1(Cube, cubes, 1)
		
		// Check for closest Cylinder
		distCheckObjs1(Cylinder, cylinders, 2)
		
		// Check for closest Cone
		distCheckObjs1(Cone, cones, 3)
		
		
		//float normalScale = max(0.5, abs(dot(normalScene(ray_loc), ray_dir)));
		//ray_loc += ray_dir * max(minDist, minDist / normalScale);
		if (distance(minimumDistance, minDist) < mDepsDistDiff && minDist < mDepsDistMin) {
			minDist *= pow(2, mDeqCount + 1);
			mDeqCount++;
		} else {
			minimumDistance = minDist;
			mDeqCount = 0;
		}
		ray_loc += ray_dir * minDist;

		if (minDist < hitThreshold) {
			/*
			vec3 normal =
				  obj_type == 0 ? normalSphere(ray_loc, spheres[obj_index].location, spheres[obj_index].radius)
				: obj_type == 1 ? normalCube(ray_loc, cubes[obj_index].location, cubes[obj_index].dimensions)
				: obj_type == 2 ? normalCylinder(ray_loc, cylinders[obj_index].location, cylinders[obj_index].radius, cylinders[obj_index].height)
				: obj_type == 3 ? normalCone(ray_loc, cones[obj_index].location, cones[obj_index].radius, cones[obj_index].height)
				: vec3(0.0)
			;
			*/
			int mat_type =
				  obj_type == 0 ? spheres[obj_index].material_type
				: obj_type == 1 ? cubes[obj_index].material_type
				: obj_type == 2 ? cylinders[obj_index].material_type
				: obj_type == 3 ? cones[obj_index].material_type
				: -1
			;
			int mat_index =
				  obj_type == 0 ? spheres[obj_index].material_index
				: obj_type == 1 ? cubes[obj_index].material_index
				: obj_type == 2 ? cylinders[obj_index].material_index
				: obj_type == 3 ? cones[obj_index].material_index
				: -1
			;

			return RaycastHit(true, ray_loc, ray_dir, normalScene(ray_loc), obj_type, obj_index, mat_type, mat_index);
		}
	}

	return RaycastHit(false, vec3(0.0), vec3(0.0), vec3(0.0), -1, -1, -1, -1);
}
RaycastHit raycast_light(vec3 ray_loc, vec3 ray_dir, inout PointLight point_light) {
	vec3 init_loc = ray_loc;
	ray_loc += ray_dir * hitThreshold * 100.0;

	while (distance(init_loc, ray_loc) < farPlane) {
		float minDist = 999999999;
		float temp = min(minDist, signDistSphere(ray_loc, point_light.location, point_light.radius));
		if (temp < minDist) {
			minDist = temp;
		}
		ray_loc += ray_dir * minDist;
		
		if (minDist < hitThreshold) {
			vec3 normal = normalSphere(ray_loc, point_light.location, point_light.radius);
			return RaycastHit(true, ray_loc, ray_dir, normal, -1, -1, -1, -1);
		}
	}

	return RaycastHit(false, vec3(0.0), vec3(0.0), vec3(0.0), -1, -1, -1, -1);
}

RaycastHit reflectRay(inout RaycastHit ray) {
	return RaycastHit(
		ray.hit,
		ray.location,
		normalize(reflect(normalize(ray.direction), normalize(ray.normal))),
		ray.normal,
		ray.obj_type,
		ray.obj_index,
		ray.material_type,
		ray.material_index
	);
}



float random(vec2 uv) {
	return texture(blueNoise, uv + vec2(random_f01, fract(random_f01 * 7.931199))).x;
}
vec3 randomVectorInSphericalCap(vec2 uv, vec3 normal, float max_angle, bool signedSpread = true) {
	vec3 tg1  = tangent(normal);
	vec3 tg2  = normalize(cross(normal, tg1));

	float min_angle = signedSpread ? -max_angle / 2.0 : 0.0;
	max_angle       = signedSpread ?  max_angle / 2.0 : max_angle;

	float theta1 = mix(radians(min_angle), radians(max_angle), random(uv + vec2(0.000, 0.543)));
	float theta2 = mix(radians(min_angle), radians(max_angle), random(uv + vec2(0.341, 0.121)));
	float theta3 = mix(radians(min_angle), radians(max_angle), random(uv + vec2(0.859, 0.652)));

	vec3 rot1 = rotateVector(normal, tg1,    theta1);
	vec3 rot2 = rotateVector(rot1,   tg2,    theta2);
	vec3 rot3 = rotateVector(rot2,   normal, theta3);
	
	return rot3;
}
vec3 randomVectorInHemisphere(vec2 uv, vec3 normal) {
	return randomVectorInSphericalCap(uv, normal, 180.0);
}


vec3 fresnel_schlick(float cos_theta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(1.0 - cos_theta, 5.0);
}
float ndf_ggx(vec3 normal, vec3 half_vector, float roughness) {
    float r2 = roughness * roughness;
    float NdotH = max(dot(normal, half_vector), 0.0);
    float NdotH2 = NdotH * NdotH;

    float denominator = (NdotH2 * (r2 - 1.0) + 1.0);
    return r2 / (pi * denominator * denominator);
}
float geometry_schlick_ggx(float NdotV, float roughness) {
    float r = (roughness + 1.0);
    float k = (r * r) / 8.0;
    return NdotV / (NdotV * (1.0 - k) + k);
}
float geometry_smith(vec3 normal, vec3 view_dir, vec3 light_dir, float roughness) {
    float NdotV = max(dot(normal, view_dir), 0.0);
    float NdotL = max(dot(normal, light_dir), 0.0);
    float ggx1 = geometry_schlick_ggx(NdotV, roughness);
    float ggx2 = geometry_schlick_ggx(NdotL, roughness);
    return ggx1 * ggx2;
}

vec3 generate_diffuse_ray(vec2 uv, inout RaycastHit ray) {
	float rdisp = fract((ray.location.x + ray.location.y + ray.location.z) * 23.49789);
    return randomVectorInHemisphere(uv + vec2(rdisp, fract(rdisp * 3.65243)), ray.normal);
}
vec3 generate_glossy_ray(vec2 uv, inout RaycastHit ray) {
	float rdisp = fract((ray.location.x + ray.location.y + ray.location.z) * 19.62173);
	return normalize(mix(reflectRay(ray).direction, randomVectorInHemisphere(uv + vec2(rdisp, fract(rdisp * 1.722459)), ray.normal), principled_bsdfs[ray.material_index].roughness));
}

vec3 lambertian_shading(inout RaycastHit ray, inout PointLight point_light) {
    vec3 light_dir = normalize(point_light.location - ray.location);

    float diffuse_intensity = max(dot(ray.normal, light_dir), 0.0f);
    vec3 diffuse_color = principled_bsdfs[ray.material_index].albedo * point_light.color * diffuse_intensity;
    return diffuse_color;
}
vec3 cook_torrance_brdf(inout RaycastHit ray, inout PointLight point_light) {
    vec3 light_dir = normalize(point_light.location - ray.location);
	vec3 view_dir = normalize(camera_loc - ray.location);
    vec3 F0 = mix(vec3(0.04), principled_bsdfs[ray.material_index].albedo, principled_bsdfs[ray.material_index].metallic);

    vec3 half_vector = normalize(view_dir + light_dir);
    float NDF = ndf_ggx(ray.normal, half_vector, principled_bsdfs[ray.material_index].roughness);
    float G = geometry_smith(ray.normal, view_dir, light_dir, principled_bsdfs[ray.material_index].roughness);
    vec3 F = fresnel_schlick(dot(ray.normal, half_vector), F0);

    float denominator = 4.0 * max(dot(ray.normal, view_dir), 0.0) * max(dot(ray.normal, light_dir), 0.0);
    vec3 specular = (NDF * G * F) / max(denominator, 0.001);

    vec3 kS = F;
    vec3 kD = vec3(1.0) - kS;
    kD *= 1.0 - principled_bsdfs[ray.material_index].metallic;

    float NdotL = max(dot(ray.normal, light_dir), 0.0f);
    return (kD * principled_bsdfs[ray.material_index].albedo / pi + principled_bsdfs[ray.material_index].reflectance) * NdotL;
}

vec3 principled_bsdf_shading(inout RaycastHit ray, inout PointLight point_light) {
    vec3 vdiffuse = lambertian_shading(ray, point_light);
    vec3 vspecular = cook_torrance_brdf(ray, point_light);

	return vdiffuse * vspecular;
}



void main() {
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = vec2(pixel_coords) / vec2(imageSize(img_output));

	if (scene_change == -1) {
		imageStore(img_output, pixel_coords, vec4(vec3(0.0), 1.0));
		return;
	}



	int ray_index = pixel_coords.y * imageSize(img_output).x + pixel_coords.x;

	float ndcX = 1.0 - (pixel_coords.x * 2.0) / imageSize(img_output).x;
	float ndcY = 1.0 - (pixel_coords.y * 2.0) / imageSize(img_output).y;

	vec4 ndcPoint = vec4(ndcX, ndcY, -1.0, 1.0);

	vec4 worldPoint = inverse(camera_proj * camera_view) * ndcPoint;
	worldPoint /= worldPoint.w;

	vec3 ray_loc = camera_loc;
	vec3 ray_dir = normalize(worldPoint.xyz - camera_loc);
	vec3 ray_color = vec3(0.0);

	

	const int max_diffuse_bounces = 4;
	const int max_glossy_bounces  = 8;

	RaycastHit hit = raycast(ray_loc, ray_dir);
	if (hit.hit == true) {
		float dist = 0.0;
		RaycastHit copy_hit = hit;
		RaycastHit last_hit;

		// Diffuse rays
		vec3 diffuse_color = vec3(0.0);
		int bounces = max_diffuse_bounces;
		while (bounces > 0) {
			last_hit = hit;


			// Need to make a special raycast_light function that tests hits taking into account light's radius
			//RaycastHit shadow_hit = raycast_light(ray_loc, ray_dir);

			//vec3 light_contrib = light_color * mix(0.0, light_power, 1.0 - min(1.0, distance(light_loc, hit.ray_loc) / light_radius));
			for (int i = 0; i < point_lights_no; i++) {
				diffuse_color += principled_bsdf_shading(hit, point_lights[i]);
			}

			hit = raycast(hit.location, generate_diffuse_ray(uv, hit));


			dist += distance(hit.location, last_hit.location);
			bounces--;
		}
		diffuse_color /= max_diffuse_bounces;


		// Go back to initial hit
		dist = 0.0;
		hit = copy_hit;

		// Glossy rays
		vec3 glossy_color = vec3(0.0);
		bounces = max_glossy_bounces;
		while (bounces > 0) {
			last_hit = hit;


			//vec3 light_contrib = light_color * mix(0.0, light_power, 1.0 - min(1.0, distance(light_loc, hit.ray_loc) / light_radius));
			for (int i = 0; i < point_lights_no; i++) {
				glossy_color += principled_bsdf_shading(hit, point_lights[i]);
			}

			hit = raycast(hit.location, generate_glossy_ray(uv, hit));


			dist += distance(hit.location, last_hit.location);
			bounces--;
		}
		glossy_color /= max_glossy_bounces;


		ray_color = diffuse_color * glossy_color;
	}
	ray_color = max(ray_color, 0.0);



	vec3 currect_pixel = scene_change == 0 ? max(vec3(imageLoad(img_output, pixel_coords)), 0.0) : vec3(0.0);
	vec4 final_color = vec4((currect_pixel + ray_color), 1.0);
	imageStore(img_output, pixel_coords, final_color);

	//imageStore(img_output, pixel_coords, texture(blueNoise, uv));
}
