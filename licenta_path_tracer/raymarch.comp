#version 460 core
#extension GL_ARB_shading_language_include : require
#include "/basic_shapes.comp" //! #include "./basic_shapes.comp"

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D img_output;



//  0 - accumulate samples;
//  1 - rendered frame only
// -1 - reset image buffer
uniform int scene_change = 0;

uniform mat4 camera_proj;
uniform mat4 camera_view;
uniform vec3 camera_pos;
uniform int rng_seed;
uniform int samples;

const float hitThreshold = 0.001;
const float farPlane = 1000.0;
const int max_bounces = 4;

uniform vec3 light_pos = vec3(-20.0, -20.0, 20.0);
uniform float light_radius = 10.0;
uniform vec3 light_color = vec3(1.0, 1.0, 1.0);

uniform sampler2D blueNoise;


layout (std430, binding = 1) buffer Spheres {
	Sphere[] spheres;
};
uniform int spheres_no;

layout (std430, binding = 2) buffer Cubes {
	Cube[] cubes;
};
uniform int cubes_no;

layout (std430, binding = 3) buffer Cylinders {
	Cylinder[] cylinders;
};
uniform int cylinders_no;

layout (std430, binding = 4) buffer Cones {
	Cone[] cones;
};
uniform int cones_no;


struct RaycastHit {
	bool hit;
	vec3 ray_pos;
	vec3 ray_dir;
	vec4 ray_color;
	vec3 normal;
	int obj_type;
	int obj_index;
};

float signDistBlendedObj(float obj_dist_0, float obj_dist_1, int booleanType = -1, float blend = 0.5) {
	switch(booleanType) {
	case -1:
		return min(obj_dist_0, obj_dist_1);
	case 0:
		return smoothUnion(obj_dist_0, obj_dist_1, blend);
	case 1:
		return smoothIntersect(obj_dist_0, obj_dist_1, blend);
	case 2:
		return smoothDifference(obj_dist_0, obj_dist_1, blend);
	}
}
float signDistObj(vec3 ray_pos, int obj_type, int obj_index) {
	switch(obj_type) {
	case 0:
		return signDistSphere(ray_pos, spheres[obj_index]);
	case 1:
		return signDistCube(ray_pos, cubes[obj_index]);
	case 2:
		return signDistCylinder(ray_pos, cylinders[obj_index]);
	case 3:
		return signDistCone(ray_pos, cones[obj_index]);
	}
	return -999999999;
}
float signDistScene(vec3 ray_pos) {
	float minDist = 999999999;

	// Check for closest Sphere
	for (int i = 0; i < spheres_no; ++i) {
		if (spheres[i].visible == 0) {
			continue;
		}

		float distToSphere = signDistSphere(ray_pos, spheres[i]);
		float distToOther = signDistObj(ray_pos, spheres[i].booleanObjType, spheres[i].booleanObjIndex);
		float booleanDist = signDistBlendedObj(distToSphere, distToOther, spheres[i].booleanType);
		float closest = signDistBlendedObj(minDist, booleanDist);

		if (closest < minDist) {
			minDist = closest;
		}
	}
	// Check for closest Cube
	for (int i = 0; i < cubes_no; ++i) {
		if (cubes[i].visible == 0) {
			continue;
		}

		float distToCube = signDistCube(ray_pos, cubes[i]);
		float distToOther = signDistObj(ray_pos, cubes[i].booleanObjType, cubes[i].booleanObjIndex);
		float booleanDist = signDistBlendedObj(distToCube, distToOther, cubes[i].booleanType);
		float closest = signDistBlendedObj(minDist, booleanDist);

		if (closest < minDist) {
			minDist = closest;
		}
	}
	// Check for closest Cylinder
	for (int i = 0; i < cylinders_no; ++i) {
		if (cylinders[i].visible == 0) {
			continue;
		}

		float distToCylinder = signDistCylinder(ray_pos, cylinders[i]);
		float distToOther = signDistObj(ray_pos, cylinders[i].booleanObjType, cylinders[i].booleanObjIndex);
		float booleanDist = signDistBlendedObj(distToCylinder, distToOther, cylinders[i].booleanType);
		float closest = signDistBlendedObj(minDist, booleanDist);

		if (closest < minDist) {
			minDist = closest;
		}
	}
	// Check for closest Cone
	for (int i = 0; i < cones_no; ++i) {
		if (cones[i].visible == 0) {
			continue;
		}
		
		float distToCone = signDistCone(ray_pos, cones[i]);
		float distToOther = signDistObj(ray_pos, cones[i].booleanObjType, cones[i].booleanObjIndex);
		float booleanDist = signDistBlendedObj(distToCone, distToOther, cones[i].booleanType);
		float closest = signDistBlendedObj(minDist, booleanDist);

		if (closest < minDist) {
			minDist = closest;
		}
	}

	return minDist;
}
vec3 normalScene(vec3 ray_pos) {
	const float epsilon = 0.001;
	const mat3x3 d = mat3x3(
		vec3(epsilon, 0, 0),
		vec3(0, epsilon, 0),
		vec3(0, 0, epsilon)
	);

	float cd = signDistScene(ray_pos);
	return normalize((vec3(signDistScene(ray_pos + d[0]), signDistScene(ray_pos + d[1]), signDistScene(ray_pos + d[2])) - cd) / epsilon);
}

RaycastHit raycast(vec3 ray_pos, vec3 ray_dir) {
	vec3 init_pos = ray_pos;
	ray_pos += ray_dir * hitThreshold * 100.0;

	int obj_type = -1; // 0 - sphere, 1 - cube, 2 - cylinder, 3 - cone
	int obj_index = -1;
	float minimumDistance = 999999999;
	float mDepsDistMin = 0.5;
	float mDepsDistDiff = 0.1;
	int mDeqCount = 0;
	while (distance(init_pos, ray_pos) < farPlane) {
		float minDist = 999999999;

		// Check for closest Sphere
		for (int i = 0; i < spheres_no; ++i) {
			if (spheres[i].visible == 0) {
				continue;
			}

			float distToSphere = signDistSphere(ray_pos, spheres[i]);
			float distToOther = signDistObj(ray_pos, spheres[i].booleanObjType, spheres[i].booleanObjIndex);
			float booleanDist = signDistBlendedObj(distToSphere, distToOther, spheres[i].booleanType);
			float closest = signDistBlendedObj(minDist, booleanDist);

			if (closest < minDist) {
				minDist = closest;
				obj_type = 0;
				obj_index = i;
			}
		}
		// Check for closest Cube
		for (int i = 0; i < cubes_no; ++i) {
			if (cubes[i].visible == 0) {
				continue;
			}

			float distToCube = signDistCube(ray_pos, cubes[i]);
			float distToOther = signDistObj(ray_pos, cubes[i].booleanObjType, cubes[i].booleanObjIndex);
			float booleanDist = signDistBlendedObj(distToCube, distToOther, cubes[i].booleanType);
			float closest = signDistBlendedObj(minDist, booleanDist);

			if (closest < minDist) {
				minDist = closest;
				obj_type = 1;
				obj_index = i;
			}
		}
		// Check for closest Cylinder
		for (int i = 0; i < cylinders_no; ++i) {
			if (cylinders[i].visible == 0) {
				continue;
			}

			float distToCylinder = signDistCylinder(ray_pos, cylinders[i]);
			float distToOther = signDistObj(ray_pos, cylinders[i].booleanObjType, cylinders[i].booleanObjIndex);
			float booleanDist = signDistBlendedObj(distToCylinder, distToOther, cylinders[i].booleanType);
			float closest = signDistBlendedObj(minDist, booleanDist);

			if (closest < minDist) {
				minDist = closest;
				obj_type = 2;
				obj_index = i;
			}
		}
		// Check for closest Cone
		for (int i = 0; i < cones_no; ++i) {
			if (cones[i].visible == 0) {
				continue;
			}

			float distToCone = signDistCone(ray_pos, cones[i]);
			float distToOther = signDistObj(ray_pos, cones[i].booleanObjType, cones[i].booleanObjIndex);
			float booleanDist = signDistBlendedObj(distToCone, distToOther, cones[i].booleanType);
			float closest = signDistBlendedObj(minDist, booleanDist);

			if (closest < minDist) {
				minDist = closest;
				obj_type = 3;
				obj_index = i;
			}
		}
		
		//float normalScale = max(0.5, abs(dot(normalScene(ray_pos), ray_dir)));
		//ray_pos += ray_dir * max(minDist, minDist / normalScale);
		if (distance(minimumDistance, minDist) < mDepsDistDiff && minDist < mDepsDistMin) {
			minDist *= pow(2, mDeqCount + 1);
			mDeqCount++;
		} else {
			minimumDistance = minDist;
			mDeqCount = 0;
		}
		ray_pos += ray_dir * minDist;

		if (minDist < hitThreshold) {
			/*
			vec3 normal =
				  obj_type == 0 ? normalSphere(ray_pos, spheres[obj_index].location, spheres[obj_index].radius)
				: obj_type == 1 ? normalCube(ray_pos, cubes[obj_index].location, cubes[obj_index].dimensions)
				: obj_type == 2 ? normalCylinder(ray_pos, cylinders[obj_index].location, cylinders[obj_index].radius, cylinders[obj_index].height)
				: obj_type == 3 ? normalCone(ray_pos, cones[obj_index].location, cones[obj_index].radius, cones[obj_index].height)
				: vec3(0.0)
			;
			*/
			vec4 color =
				  obj_type == 0 ? spheres[obj_index].color
				: obj_type == 1 ? cubes[obj_index].color
				: obj_type == 2 ? cylinders[obj_index].color
				: obj_type == 3 ? cones[obj_index].color
				: vec4(1.0)
			;
			return RaycastHit(true, ray_pos, ray_dir, color, normalScene(ray_pos), obj_type, obj_index);
		}
	}

	return RaycastHit(false, vec3(0.0), vec3(0.0), vec4(0.0), vec3(0.0), -1, -1);
}
RaycastHit raycast_light(vec3 ray_pos, vec3 ray_dir) {
	vec3 init_pos = ray_pos;
	ray_pos += ray_dir * hitThreshold * 100.0;

	while (distance(init_pos, ray_pos) < farPlane) {
		float minDist = 999999999;
		float temp = min(minDist, signDistSphere(ray_pos, light_pos, light_radius));
		if (temp < minDist) {
			minDist = temp;
		}
		ray_pos += ray_dir * minDist;
		
		if (minDist < hitThreshold) {
			vec3 normal = normalSphere(ray_pos, light_pos, light_radius);
			return RaycastHit(true, ray_pos, ray_dir, vec4(1.0), normal, -1, -1);
		}
	}

	return RaycastHit(false, vec3(0.0), vec3(0.0), vec4(0.0), vec3(0.0), -1, -1);
}

RaycastHit reflectHit(in RaycastHit hit) {
	return RaycastHit(
		hit.hit,
		hit.ray_pos,
		normalize(reflect(normalize(hit.ray_dir), normalize(hit.normal))),
		hit.ray_color,
		hit.normal,
		hit.obj_type,
		hit.obj_index
	);
}



float random(vec2 uv) {
	return texture(blueNoise, uv).x;
}
vec3 randomVectorInSphericalCap(vec2 uv, vec3 normal, float max_angle, bool signedSpread = true) {
	vec3 tg1  = tangent(normal);
	vec3 tg2  = normalize(cross(normal, tg1));

	float theta1 = acos(1.0 - random(uv + vec2(0.000, 0.543)) * (1.0 - cos(radians(max_angle - (signedSpread ? max_angle / 2.0 : 0.0)))));
	float theta2 = acos(1.0 - random(uv + vec2(0.341, 0.121)) * (1.0 - cos(radians(max_angle - (signedSpread ? max_angle / 2.0 : 0.0)))));
	float theta3 = acos(1.0 - random(uv + vec2(0.859, 0.652)) * (1.0 - cos(radians(max_angle - (signedSpread ? max_angle / 2.0 : 0.0)))));

	vec3 rot1 = rotateVector(normal, tg1,    theta1);
	vec3 rot2 = rotateVector(rot1,   tg2,    theta2);
	vec3 rot3 = rotateVector(rot2,   normal, theta3);
	
	return rot3;
}
vec3 randomVectorInHemisphere(vec2 uv, vec3 normal) {
	return randomVectorInSphericalCap(uv, normal, 180.0);
}


vec3 lambertian_shading(in RaycastHit hit, vec3 light_dir, vec3 albedo) {
    float diffuse_intensity = max(dot(hit.normal, light_dir), 0.0f);
    vec3 diffuse_color = albedo * light_color * diffuse_intensity;
    return diffuse_color;
}
vec3 generate_diffuse_ray(vec2 uv, in RaycastHit hit) {
	float rdisp = fract((hit.ray_pos.x + hit.ray_pos.y + hit.ray_pos.z) / 2.432);
    return randomVectorInHemisphere(uv + vec2(rdisp, rdisp * 3.65243), hit.normal);
}


vec3 fresnel_schlick(float cos_theta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(1.0 - cos_theta, 5.0);
}
float ndf_ggx(vec3 normal, vec3 half_vector, float roughness) {
    float alpha = roughness * roughness;
    float alpha2 = alpha * alpha;
    float NdotH = max(dot(normal, half_vector), 0.0);
    float NdotH2 = NdotH * NdotH;

    float denominator = (NdotH2 * (alpha2 - 1.0) + 1.0);
    return alpha2 / (pi * denominator * denominator);
}
float geometry_schlick_ggx(float NdotV, float roughness) {
    float r = (roughness + 1.0);
    float k = (r * r) / 8.0;
    return NdotV / (NdotV * (1.0 - k) + k);
}
float geometry_smith(vec3 normal, vec3 view_dir, vec3 light_dir, float roughness) {
    float NdotV = max(dot(normal, view_dir), 0.0);
    float NdotL = max(dot(normal, light_dir), 0.0);
    float ggx1 = geometry_schlick_ggx(NdotV, roughness);
    float ggx2 = geometry_schlick_ggx(NdotL, roughness);
    return ggx1 * ggx2;
}
vec3 cook_torrance_brdf(in RaycastHit hit, vec3 light_dir, vec3 view_dir, vec3 F0, vec3 albedo, float metallic, float roughness, float reflectance) {
    vec3 half_vector = normalize(view_dir + light_dir);
    float NDF = ndf_ggx(hit.normal, half_vector, roughness);
    float G = geometry_smith(hit.normal, view_dir, light_dir, roughness);
    vec3 F = fresnel_schlick(max(dot(half_vector, view_dir), 0.0), F0);

    float denominator = 4.0 * max(dot(hit.normal, view_dir), 0.0) * max(dot(hit.normal, light_dir), 0.0);
    vec3 specular = (NDF * G * F) / max(denominator, 0.001);

    vec3 kS = F;
    vec3 kD = vec3(1.0) - kS;
    kD *= 1.0 - metallic;

    float NdotL = max(dot(hit.normal, light_dir), 0.0f);
    return (kD * albedo / pi + reflectance) * NdotL;
}
vec3 generate_specular_ray(vec2 uv, in RaycastHit hit, float roughness) {
    float i;
	float rdisp = modf((hit.ray_pos.x + hit.ray_pos.y + hit.ray_pos.z) / 2.432, i);
	return normalize(mix(reflectHit(hit).ray_dir, randomVectorInHemisphere(uv + vec2(rdisp, rdisp * i), hit.normal), roughness));
}


void pbr_shading(in RaycastHit hit, vec3 albedo, float metallic, float roughness, float reflectance, out vec3 voutput[2]) {
    vec3 light_dir = normalize(light_pos - hit.ray_pos);
	vec3 view_dir = normalize(camera_pos - hit.ray_pos);
    vec3 F0 = mix(vec3(0.04), albedo, metallic);

    vec3 vdiffuse = lambertian_shading(hit, light_dir, albedo);
    vec3 vspecular = cook_torrance_brdf(hit, light_dir, view_dir, F0, albedo, metallic, roughness, reflectance);

	voutput[0] = vdiffuse;
	voutput[1] = vspecular;
}



void main() {
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = vec2(pixel_coords) / vec2(imageSize(img_output));

	if (scene_change == -1) {
		imageStore(img_output, pixel_coords, vec4(vec3(0.0), 1.0));
		return;
	}



	int ray_index = pixel_coords.y * imageSize(img_output).x + pixel_coords.x;

	float ndcX = 1.0 - (pixel_coords.x * 2.0) / imageSize(img_output).x;
	float ndcY = 1.0 - (pixel_coords.y * 2.0) / imageSize(img_output).y;

	vec4 ndcPoint = vec4(ndcX, ndcY, -1.0, 1.0);

	vec4 worldPoint = inverse(camera_proj * camera_view) * ndcPoint;
	worldPoint /= worldPoint.w;

	vec3 ray_pos = camera_pos;
	vec3 ray_dir = normalize(worldPoint.xyz - camera_pos);
	vec3 ray_color = vec3(0.0);

	

	int bounces = max_bounces;
	float metallic = 0.0;
	float roughness = 0.5;
	float reflectance = 0.5;

	float dist = 0.0;
	RaycastHit hit = raycast(ray_pos, ray_dir);
	RaycastHit last_hit;
	if (hit.hit == true) {
		while (bounces > 0) {
			last_hit = hit;

			ray_color += pow(hit.ray_color.xyz, vec3(1.0 / max(max_bounces - bounces, 1)));

			//vec3 specular_dir = generate_specular_ray(uv + specular_hit.ray_dir.xy, specular_hit, roughness);
			vec2 ruv = uv * fract(sin(dot(uv * vec2(rng_seed / 93.4387, rng_seed / 143.1299), vec2(12.9898, 78.233))) * 43758.5453123);
			hit = raycast(hit.ray_pos, generate_diffuse_ray(ruv, hit));

			dist += distance(hit.ray_pos, last_hit.ray_pos);
			bounces--;
		}
	}
	ray_color = max(ray_color, 0.0) / samples * 4.0;



	vec3 currect_pixel = scene_change == 0 ? max(vec3(imageLoad(img_output, pixel_coords)), 0.0) : vec3(0.0);
	vec4 final_color = vec4((currect_pixel + ray_color), 1.0);
	final_color.a = 1.0;
	imageStore(img_output, pixel_coords, final_color);

	//imageStore(img_output, pixel_coords, texture(blueNoise, uv));
}
