
vec3 rgb2hsv(vec3 color) {
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(color.bg, K.wz), vec4(color.gb, K.xy), step(color.b, color.g));
    vec4 q = mix(vec4(p.xyw, color.r), vec4(color.r, p.yzx), step(p.x, color.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}
vec3 hsv2rgb(vec3 color) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(color.xxx + K.xyz) * 6.0 - K.www);
    return color.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), color.y);
}

vec3 hueShift(vec3 color, float hue) {
    vec3 hsv = rgb2hsv(color);
    hsv.x = mod(hsv.x + hue / 360.0, 1.0);
    return hsv2rgb(hsv);
}
vec3 saturationMul(vec3 color, float factor) {
    vec3 hsv = rgb2hsv(color);
    hsv.y *= factor;
    return hsv2rgb(hsv);
}
vec3 valueMul(vec3 color, float factor) {
    vec3 hsv = rgb2hsv(color);
    hsv.z *= factor;
    return hsv2rgb(hsv);
}


vec3 tangent(vec3 v) {
	vec3 arbx = vec3(1.0, 0.0, 0.0);
	vec3 arby = vec3(0.0, 1.0, 0.0);
	vec3 arbz = vec3(0.0, 0.0, 1.0);

	vec3 arbitrary = arbx;
	if (abs(dot(v, arby)) < abs(dot(v, arbitrary))) {
		arbitrary = arby;
	}
	if (abs(dot(v, arbz)) < abs(dot(v, arbitrary))) {
		arbitrary = arbz;
	}

	return normalize(cross(v, arbitrary));
}

float angle(vec3 a, vec3 b) {
	return acos(dot(a, b) / (length(a) * length(b)));
}


float random(float value) {
	return fract(sqrt(value * 129.898) + 100.001 / 7.69 * 43758.5453);
}
vec3 rotateVector(vec3 v, vec3 axis, float angle) {
	// Rodrigues' rotation formula
	return mix(dot(axis, v) * axis, v, cos(angle)) + cross(axis, v) * sin(angle);
}
vec3 diffuseVector(vec3 v, vec3 normal, float maxAngle) {
	float randomAngleX = random(dot(v, normal) * maxAngle + 12.68) * maxAngle - maxAngle / 2.0;
	float randomAngleY = random(dot(v, normal) * maxAngle + 41.01) * maxAngle - maxAngle / 2.0;
	float randomAngleZ = random(dot(v, normal) * maxAngle + 65.32) * maxAngle - maxAngle / 2.0;

	vec3 tg = tangent(normal);

	vec3 rotZ = rotateVector(v, normal, randomAngleZ);
	vec3 rotY = rotateVector(rotZ, tg, randomAngleY);
	vec3 rotX = rotateVector(rotY, normalize(cross(normal, tg)), randomAngleX);

	return normalize(mix(normal, rotX, 0.66));
}


uint packColor(vec4 color) {
	return uint(color.r * 255.0) << 24 |
		   uint(color.g * 255.0) << 16 |
		   uint(color.b * 255.0) <<  8 |
		   uint(color.a * 255.0);
}
vec4 unpackColor(uint packedColor) {
	return vec4(
		float((packedColor >> 24) & 0xFF) / 255.0,
		float((packedColor >> 16) & 0xFF) / 255.0,
		float((packedColor >>  8) & 0xFF) / 255.0,
		float( packedColor        & 0xFF) / 255.0
	);
}


#define m_mulAdd(type) type mulAdd(type a, type base) { \
	return fma(a, base, a); \
}
m_mulAdd(float)
m_mulAdd(double)
m_mulAdd(vec3)
m_mulAdd(vec4)


#define m_swap(type) void swap(inout type a, inout type b) { \
    type temp = a; \
    a = b; \
    b = temp; \
}
m_swap(int)
m_swap(uint)
m_swap(float)
m_swap(double)
m_swap(vec3)
m_swap(vec4)



const float pi = 3.14159;
const float rpi = 0.31831;


vec3 fresnelSchlick(float cosTheta, vec3 F0) {
	return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}
float D_GGX(float NoH, float roughness) {
	float alpha1 = roughness * roughness;
	float alpha2 = alpha1 * alpha1;

	float NoH2 = NoH * NoH;
	float b = (NoH2 * (alpha2 - 1.0) + 1.0);

	return alpha2 * rpi / (b * b);
}
float G1_GGX_Schlick(float NoV, float roughness) {
	float alpha = roughness * roughness;
	float k = alpha / 2.0;
	return max(NoV, 0.001) / (NoV * (1.0 - k) + k);
}
float G_Smith(float NoV, float NoL, float roughness) {
	return G1_GGX_Schlick(NoL, roughness) * G1_GGX_Schlick(NoV, roughness);
}
